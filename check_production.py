# check_production.py
import os
import mercadopago
from config import Config

def verificar_configuracao_mp():
    print("üîç Verificando configura√ß√£o Mercado Pago...")
    
    # Verifica se as vari√°veis est√£o configuradas
    access_token = Config.MERCADOPAGO_ACCESS_TOKEN
    
    if not access_token:
        print("‚ùå MERCADOPAGO_ACCESS_TOKEN n√£o configurado")
        print("   Configure a vari√°vel de ambiente MERCADOPAGO_ACCESS_TOKEN")
        return False
    
    # Verifica se √© token de produ√ß√£o
    if access_token.startswith('TEST-'):
        print("‚ùå‚ö†Ô∏è  ATEN√á√ÉO: Usando token de TESTE em produ√ß√£o!")
        print("   Obtenha credenciais de produ√ß√£o em: https://www.mercadopago.com.br/developers/panel/credentials")
        return False
    
    if not access_token.startswith('APP_USR-'):
        print("‚ùå Token n√£o parece ser de produ√ß√£o (deve come√ßar com 'APP_USR-')")
        return False
    
    print("‚úÖ Token de produ√ß√£o configurado:", access_token[:20] + "...")
    
    # Testa a conex√£o
    try:
        sdk = mercadopago.SDK(access_token)
        test_data = {
            "items": [{
                "title": "Teste Conex√£o Produ√ß√£o",
                "quantity": 1,
                "currency_id": "BRL",
                "unit_price": 10.0
            }]
        }
        
        result = sdk.preference().create(test_data)
        
        if result and "response" in result:
            response_data = result["response"]
            if "init_point" in response_data:
                print("‚úÖ Conex√£o com Mercado Pago PRODU√á√ÉO - OK")
                return True
            else:
                print("‚ùå Resposta inv√°lida do Mercado Pago")
                if "message" in response_data:
                    print(f"   Erro: {response_data['message']}")
                return False
        else:
            print("‚ùå Falha na comunica√ß√£o com Mercado Pago")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar Mercado Pago: {e}")
        return False

def verificar_database():
    print("üîç Verificando configura√ß√£o do banco...")
    
    database_url = Config.SQLALCHEMY_DATABASE_URI
    
    if not database_url:
        print("‚ùå DATABASE_URL n√£o configurado")
        return False
    
    if 'postgresql' in database_url:
        print("‚úÖ Banco PostgreSQL configurado")
        return True
    elif 'sqlite' in database_url:
        print("‚ö†Ô∏è  Usando SQLite (apenas desenvolvimento)")
        return True
    else:
        print("‚ùå Configura√ß√£o de banco desconhecida")
        return False

def verificar_secret_key():
    print("üîç Verificando chave secreta...")
    
    secret_key = Config.SECRET_KEY
    
    if not secret_key or secret_key == 'chave-secreta-padrao-mudar-em-producao':
        print("‚ùå SECRET_KEY n√£o configurada ou √© a padr√£o")
        print("   Gere uma chave com: python -c 'import secrets; print(secrets.token_hex(32))'")
        return False
    
    if len(secret_key) < 32:
        print("‚ùå SECRET_KEY muito curta (m√≠nimo 32 caracteres)")
        return False
    
    print("‚úÖ SECRET_KEY configurada corretamente")
    return True

def verificar_urls():
    print("üîç Verificando URLs...")
    
    # Verifica se est√° no Render
    if os.environ.get('RENDER'):
        site_url = os.environ.get('SITE_URL', '')
        if not site_url:
            print("‚ö†Ô∏è  SITE_URL n√£o configurada no Render")
            return False
        print(f"‚úÖ SITE_URL: {site_url}")
        return True
    else:
        print("‚úÖ Ambiente de desenvolvimento")
        return True

def verificar_ambiente():
    print("üîç Verificando ambiente...")
    
    if os.environ.get('RENDER'):
        print("‚úÖ Ambiente: Render (Produ√ß√£o)")
        return True
    else:
        print("‚úÖ Ambiente: Desenvolvimento Local")
        return True

if __name__ == '__main__':
    print("üöÄ VERIFICA√á√ÉO DE CONFIGURA√á√ÉO")
    print("=" * 50)
    
    ambiente_ok = verificar_ambiente()
    secret_ok = verificar_secret_key()
    db_ok = verificar_database()
    mp_ok = verificar_configuracao_mp()
    urls_ok = verificar_urls()
    
    print("=" * 50)
    
    todas_verificacoes = all([secret_ok, db_ok, mp_ok, urls_ok])
    
    if todas_verificacoes:
        print("üéâ TUDO CONFIGURADO CORRETAMENTE!")
        if os.environ.get('RENDER'):
            print("‚úÖ Pronto para produ√ß√£o no Render!")
        else:
            print("‚úÖ Pronto para desenvolvimento local!")
    else:
        print("‚ùå CORRIJA AS CONFIGURA√á√ïES ACIMA")
        print("\nüìã PR√ìXIMOS PASSOS:")
        
        if not mp_ok:
            print("1. Obtenha credenciais de PRODU√á√ÉO do Mercado Pago")
            print("   üëâ https://www.mercadopago.com.br/developers/panel/credentials")
        
        if not secret_ok:
            print("2. Gere uma SECRET_KEY segura:")
            print("   python -c 'import secrets; print(secrets.token_hex(32))'")
        
        if not db_ok:
            print("3. Configure o DATABASE_URL do Neon")